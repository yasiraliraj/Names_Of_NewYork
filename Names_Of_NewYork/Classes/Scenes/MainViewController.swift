//
//  MainViewController.swift
//  Names_Of_NewYork
//
//  Created by Yasir Ali on 11/01/2023.
//  Copyright Â© 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Gender: String {
    case male = "MALE"
    case female = "FEMALE"
}

protocol MainDisplayLogic: AnyObject
{
    func displayLoadedBabyNamesInfo(viewModel: Main.LoadBabyNamesInfo.ViewModel)
    func displayPopularBabyNameInfo(viewModel: Main.PopularBabyName.ViewModel)
}

class MainViewController: UIViewController, MainDisplayLogic
{
    var interactor: MainBusinessLogic?
    var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup()
    {
        let viewController = self
        let interactor = MainInteractor()
        let presenter = MainPresenter()
        let router = MainRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        loadBabyNamesInfo()
        updateGenderButtonsUI()
    }
    
    // MARK: Do something
    
    @IBOutlet weak var nameInfoCardView: UIView!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var ethnicityLabel: UILabel!
    @IBOutlet weak var genderLabel: UILabel!
    @IBOutlet weak var birthYearLabel: UILabel!
    @IBOutlet weak var noOfBabiesLabel: UILabel!
    @IBOutlet weak var rankLabel: UILabel!
    @IBOutlet weak var maleButton: UIButton!
    @IBOutlet weak var femaleButton: UIButton!
    @IBOutlet weak var popularNameButton: UIButton!
    
    private var selectedGender = Gender.male
    private var babyNamesInfo: [BabyNameInfo]?
    
    func loadBabyNamesInfo()
    {
        let request = Main.LoadBabyNamesInfo.Request()
        interactor?.loadBabyNameInfo(request: request)
    }
    
    func displayLoadedBabyNamesInfo(viewModel: Main.LoadBabyNamesInfo.ViewModel)
    {
        self.babyNamesInfo = viewModel.babyNamesInfo
        
        DispatchQueue.main.async {
            self.popularNameButton.isEnabled = self.babyNamesInfo != nil && !(self.babyNamesInfo ?? []).isEmpty
        }
        
        
        debugPrint("Loaded Baby Name count = \(String(describing: viewModel.babyNamesInfo?.count))")
        debugPrint("Loaded Baby Name error = \(String(describing: viewModel.error?.localizedDescription))")
    }
    
    func displayPopularBabyNameInfo(viewModel: Main.PopularBabyName.ViewModel)
    {
        if viewModel.error == nil {
            nameInfoCardView.isHidden = false
            nameLabel.text          = viewModel.babyNameInfo?.name ?? ""
            ethnicityLabel.text     = viewModel.babyNameInfo?.ethnicity.capitalized ?? ""
            genderLabel.text        = viewModel.babyNameInfo?.gender.capitalized ?? ""
            
            let yearOfBirth         = viewModel.babyNameInfo?.yearOfBirth ?? 0
            birthYearLabel.text     = yearOfBirth > 0 ? String(yearOfBirth) : ""
            let noOfBabies          = viewModel.babyNameInfo?.numberOfBabies ?? 0
            noOfBabiesLabel.text    = noOfBabies > 0 ? String(noOfBabies) : ""
            let rank                = viewModel.babyNameInfo?.rank ?? 0
            rankLabel.text          = rank > 0 ? String(rank) : ""
        }
        else {
            debugPrint("Error: \(viewModel.error?.localizedDescription ?? "Something went wrong.")")
        }
    }
}

//MARK: Private Methods
extension MainViewController {
    private func updateGenderButtonsUI() {
        maleButton.isSelected = selectedGender == .male
        femaleButton.isSelected = selectedGender == .female
        
        maleButton.tintColor = maleButton.isSelected ? .blue : .lightGray
        femaleButton.tintColor = femaleButton.isSelected ? .blue : .lightGray
    }
}

// MARK: IBAction
extension MainViewController {
    @IBAction func maleButtonTapped() {
        selectedGender = .male
        updateGenderButtonsUI()
    }
    
    @IBAction func femaleButtonTapped() {
        selectedGender = .female
        updateGenderButtonsUI()
    }
    
    @IBAction func getPopularNameInfoButtonTapped() {
        let request = Main.PopularBabyName.Request(gender: selectedGender.rawValue, babyNamesInfo: babyNamesInfo ?? [])
        interactor?.getPopularBabyNameInfo(request: request)
    }
}
